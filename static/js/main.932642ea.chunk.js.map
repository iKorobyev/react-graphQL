{"version":3,"sources":["components/Preloader.js","components/PubRepos.jsx","components/UserRepos.jsx","components/RepoPage.jsx","components/App.jsx","index.js"],"names":["Preloader","react_default","a","createElement","className","PubRepos","props","_this","Object","classCallCheck","this","_super","call","state","isDefault","isSearch","searchText","cursor","queryValue","page","setState","document","getElementById","value","temp","toString","_this2","DEFAULT_QUERY","gql","_templateObject","taggedTemplateLiteral","queryText","SEARCH_QUERY","_templateObject2","react_components_esm","query","_ref","loading","error","data","components_Preloader","alert","massage","prs","search","isPage","align","id","Button","color","onClick","searchButton","repositoryCount","nodes","map","key","set","owner","login","name","src","avatarUrl","width","height","alt","pageInfo","hasPreviousPage","prevPage","startCursor","nextPage","endCursor","Component","QUERY","UserRepos_templateObject","UserRepo","localStorage","setItem","prompt","window","location","reload","viewer","repositories","RepoPage","console","log","RepoPage_templateObject","message","repository","createdAt","updatedAt","issues","totalCount","forkCount","languages","edges","style","node","size","App","userRepos","o","n","i","Fragment","clear","UserRepos","setIsPage","components_PubRepos","RepoPage_RepoPage","httpLink","HttpLink","uri","headers","authorization","getItem","link","ApolloLink","from","apolloLogger","cache","InMemoryCache","logger","loggerEnabled","client","ApolloClient","ReactDOM","render","react_common_esm","components_App"],"mappings":"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","file":"static/js/main.932642ea.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Preloader = () => (\r\n  <div className=\"preloader\">\r\n    <div className=\"loader\" />\r\n  </div>\r\n);\r\n\r\nexport default Preloader;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\nimport { Button } from \"reactstrap\";\r\n\r\nimport Preloader from \"./Preloader\";\r\n\r\nclass PubRepos extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isDefault: true,\r\n      isSearch: false,\r\n      searchText: \"*\",\r\n      cursor: \"$afterCursor\",\r\n      queryValue: \"Search($afterCursor: String)\",\r\n      page: \"after: \"\r\n    };\r\n  }\r\n  searchButton() {\r\n    this.setState(() => {\r\n      return {\r\n        isDefault: false,\r\n        isSearch: true,\r\n        searchText: document.getElementById(\"searchInput\").value\r\n      };\r\n    });\r\n  }\r\n\r\n  nextPage(cursor) {\r\n    let temp = cursor.toString();\r\n    this.setState(() => {\r\n      return {\r\n        cursor: '\"' + temp + '\"',\r\n        queryValue: \"Search\",\r\n        page: \"after: \"\r\n      };\r\n    });\r\n  }\r\n\r\n  prevPage(cursor) {\r\n    let temp = cursor.toString();\r\n    this.setState(() => {\r\n      return {\r\n        cursor: '\"' + temp + '\"',\r\n        queryValue: \"Search\",\r\n        page: \"before: \"\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const DEFAULT_QUERY = gql`\r\n    query ${this.state.queryValue}{\r\n      search(query: \"is:public\", type: REPOSITORY, ${this.state.page +\r\n        this.state.cursor}, first: 10) {\r\n    repositoryCount\r\n    pageInfo {\r\n      endCursor\r\n      startCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n    }\r\n    nodes {\r\n      ... on Repository {\r\n        id\r\n        name\r\n        owner {\r\n          login\r\n          avatarUrl(size: 10)\r\n          url\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n  `;\r\n    let queryText = this.state.searchText;\r\n    const SEARCH_QUERY = gql`\r\n    query ${this.state.queryValue}{\r\n      search(query: \"${queryText}\", type: REPOSITORY, ${this.state.page +\r\n      this.state.cursor}, first: 10) {\r\n      repositoryCount\r\n      pageInfo {\r\n        endCursor\r\n        startCursor\r\n        hasNextPage\r\n        hasPreviousPage\r\n      }\r\n      nodes {\r\n        ... on Repository {\r\n        id\r\n        name\r\n        owner {\r\n          login\r\n          avatarUrl(size: 10)\r\n          url\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n  `;\r\n    return (\r\n      <Query query={this.state.isDefault ? DEFAULT_QUERY : SEARCH_QUERY}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <Preloader />;\r\n          if (error) return alert(error.massage);\r\n          const prs = data.search;\r\n          if (!this.state.isPage) {\r\n            return (\r\n              <div align=\"center\" className=\"reposes\">\r\n                <input id=\"searchInput\" />\r\n                <Button color=\"success\" onClick={() => this.searchButton()}>\r\n                  Поиск\r\n                </Button>\r\n                <br />\r\n                {data.search.repositoryCount} результатов\r\n                {prs.nodes.map((data, key) => {\r\n                  return (\r\n                    <div\r\n                      className=\"repo\"\r\n                      key={key}\r\n                      onClick={() =>\r\n                        this.props.set(data.owner.login, data.name, true)\r\n                      }\r\n                    >\r\n                      <img\r\n                        src={data.owner.avatarUrl}\r\n                        width=\"50px\"\r\n                        height=\"50px\"\r\n                        alt=\"img\"\r\n                        align=\"left\"\r\n                      />\r\n                      <i>{data.owner.login}</i>\r\n                      <h1 align=\"right\">{data.name}</h1>\r\n                    </div>\r\n                  );\r\n                })}\r\n                {prs.pageInfo.hasPreviousPage && (\r\n                  <Button\r\n                    onClick={() => this.prevPage(prs.pageInfo.startCursor)}\r\n                  >\r\n                    Prev\r\n                  </Button>\r\n                )}\r\n                <Button onClick={() => this.nextPage(prs.pageInfo.endCursor)}>\r\n                  Next\r\n                </Button>\r\n              </div>\r\n            );\r\n          }\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PubRepos;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\nimport Preloader from \"./Preloader\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst QUERY = gql`\r\n  query {\r\n    viewer {\r\n      id\r\n      login\r\n      repositories(first: 10) {\r\n        nodes {\r\n          name\r\n          url\r\n          owner {\r\n            login\r\n            avatarUrl\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass UserRepo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      owner: \"\",\r\n      name: \"\",\r\n      isPage: false\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <Query query={QUERY}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <Preloader />;\r\n          if (error)\r\n            return (\r\n              <p>\r\n                Видимо, вы вели неверный токен{\" \"}\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    localStorage.setItem(\"token\", prompt(\"Введите токен\", \"\"));\r\n                    window.location.reload();\r\n                  }}\r\n                >\r\n                  Ввести!\r\n                </Button>\r\n              </p>\r\n            );\r\n          const prs = data.viewer.repositories.nodes;\r\n          if (!this.state.isPage) {\r\n            return (\r\n              <div align=\"center\" className=\"reposes\">\r\n                <h4>{data.viewer.login}</h4>\r\n                {prs.map((data, key) => {\r\n                  return (\r\n                    <div\r\n                      className=\"repo\"\r\n                      key={key}\r\n                      onClick={() =>\r\n                        this.props.set(data.owner.login, data.name, true)\r\n                      }\r\n                    >\r\n                      <img\r\n                        src={data.owner.avatarUrl}\r\n                        width=\"50px\"\r\n                        height=\"50px\"\r\n                        alt=\"img\"\r\n                        align=\"left\"\r\n                      />\r\n                      <h1>{data.name}</h1>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          }\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserRepo;\r\n","import React, { Component } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\n\r\nimport { Button } from \"reactstrap\";\r\nimport Preloader from \"./Preloader\";\r\n\r\nexport default class RepoPage extends Component {\r\n  render() {\r\n    console.log(this.props);\r\n    const QUERY = gql`\r\n      query {\r\n        repository(name: \"${this.props.name}\", owner: \"${this.props.owner}\") {\r\n          createdAt\r\n          updatedAt\r\n          issues {\r\n            totalCount\r\n          }\r\n          languages(first: 10) {\r\n            totalCount\r\n            edges {\r\n              size\r\n              node {\r\n                color\r\n                name\r\n              }\r\n            }\r\n          }\r\n          forkCount\r\n        }\r\n      }\r\n    `;\r\n    return (\r\n      <div>\r\n        <Query query={QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <Preloader />;\r\n            if (error) return <p align=\"center\">Error! {error.message}</p>;\r\n            return (\r\n              <div align=\"center\" className=\"page\">\r\n                <Button\r\n                  className=\"close\"\r\n                  align=\"rigth\"\r\n                  onClick={() =>\r\n                    this.props.set(this.props.name, this.props.owner, false)\r\n                  }\r\n                >\r\n                  x\r\n                </Button>\r\n                <br />\r\n                <div>Создан: {data.repository.createdAt}</div>\r\n                <div>Изменён: {data.repository.updatedAt}</div>\r\n                <div>Issues count: {data.repository.issues.totalCount}</div>\r\n                <div>Количество форков: {data.repository.forkCount}</div>\r\n                <div>\r\n                  Используемые языки:\r\n                  <ul>\r\n                    {data.repository.languages.edges.map((data, key) => {\r\n                      return (\r\n                        <li\r\n                          align=\"left\"\r\n                          key={key}\r\n                          style={{\r\n                            color: data.node.color\r\n                          }}\r\n                        >\r\n                          <div>{data.node.name}</div> Количество строк кода:{\" \"}\r\n                          {data.size}\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PubRepos from \"./PubRepos\";\r\nimport UserRepos from \"./UserRepos\";\r\n\r\nimport { Button } from \"reactstrap\";\r\nimport RepoPage from \"./RepoPage\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userRepos: true,\r\n      owner: \"\",\r\n      name: \"\",\r\n      isPage: false\r\n    };\r\n  }\r\n\r\n  setIsPage(o, n, i) {\r\n    this.setState(() => ({\r\n      owner: o,\r\n      name: n,\r\n      isPage: i\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"header\">\r\n          <br />\r\n          <div align=\"center\">\r\n            <Button\r\n              color=\"info\"\r\n              className=\"pub\"\r\n              onClick={() => {\r\n                this.setState(() => ({ userRepos: false }));\r\n              }}\r\n            >\r\n              Публичные репозитории\r\n            </Button>\r\n            <Button\r\n              color=\"info\"\r\n              className=\"user\"\r\n              onClick={() => {\r\n                this.setState(() => ({ userRepos: true }));\r\n              }}\r\n            >\r\n              Ваши репозитории\r\n            </Button>\r\n            <Button\r\n              className=\"exit\"\r\n              color=\"danger\"\r\n              onClick={() => {\r\n                localStorage.clear();\r\n                window.location.reload();\r\n              }}\r\n            >\r\n              Выйти\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        {this.state.userRepos ? (\r\n          <UserRepos set={(o, n, i) => this.setIsPage(o, n, i)} />\r\n        ) : (\r\n          <PubRepos set={(o, n, i) => this.setIsPage(o, n, i)} />\r\n        )}\r\n        {this.state.isPage && (\r\n          <RepoPage\r\n            name={this.state.name}\r\n            owner={this.state.owner}\r\n            set={(o, n, i) => this.setIsPage(o, n, i)}\r\n          />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport apolloLogger from \"apollo-link-logger\";\nimport { ApolloLink } from \"apollo-link\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button } from \"reactstrap\";\n\nimport \"./styles.css\";\n\nimport App from \"./components/App\";\n\nfunction token() {\n  localStorage.setItem(\"token\", prompt(\"Ваш github token: \", \"\"));\n  window.location.reload();\n}\n\nconst httpLink = new HttpLink({\n  uri: \"https://api.github.com/graphql\",\n  headers: {\n    authorization: \"Bearer \" + localStorage.getItem(\"token\")\n  }\n});\n\nconst link = ApolloLink.from([apolloLogger, httpLink]);\n\nconst cache = new InMemoryCache({\n  logger: console.log,\n  loggerEnabled: false\n});\n\nconst client = new ApolloClient({\n  link,\n  cache\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    {localStorage.getItem(\"token\") == null ? (\n      <Button color=\"primary\" className=\"enter\" onClick={() => token()}>\n        Ввести GitToken\n      </Button>\n    ) : (\n      <App />\n    )}\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}